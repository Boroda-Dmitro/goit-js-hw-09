{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAChCC,EAAU,KACVC,EAAe,EA0CnB,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAEpCH,EAAQ,uBAAwCI,OAAfP,EAAS,QAAYO,OAANN,EAAM,OAEpDG,EAAK,sBAAqCG,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,IAKxDP,EAAKc,iBAAiB,UAnDQ,SAAAC,GAC5BA,EAAMC,iBAEN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYZ,EAAKU,EAALV,MAAOa,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAGvBC,EAAcC,OAAOhB,EAAMiB,OAASD,OAAOH,EAAKI,OAEpDC,YAAW,WACTpB,EAAcD,EAAcG,EAAMiB,OAC/BE,MAAK,SAAAF,GACJG,EAAA7B,GAAS8B,OAAOC,QAAQL,E,IAEzBM,OAAM,SAAAN,GACLG,EAAA7B,GAAS8B,OAAOG,QAAQP,E,IAEzBQ,SAAQ,WACP,OAAQ5B,GAAgB,C,IAG5BD,EAAU8B,aAAY,WACpB5B,EAAcD,EAAckB,GACzBI,MAAK,SAAAF,GACJG,EAAA7B,GAAS8B,OAAOC,QAAQL,E,IAEzBM,OAAM,SAAAN,GACLG,EAAA7B,GAAS8B,OAAOG,QAAQP,E,IAE5BpB,GAAgB,EAChBkB,GAAeC,OAAOH,EAAKI,OACvBpB,EAAemB,OAAOF,EAAOG,SAC/BU,cAAc/B,GACdmB,EAAc,EACdlB,EAAe,E,GAEhBgB,EAAKI,M,GACPjB,EAAMiB,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\nlet timerId = null;\nlet promisNumber = 1;\n\nconst onSubmitCreatePromise = event => {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  let promisDelay = Number(delay.value) + Number(step.value);\n\n  setTimeout(() => {\n    createPromise(promisNumber, delay.value)\n      .then(value => {\n        Notiflix.Notify.success(value);\n      })\n      .catch(value => {\n        Notiflix.Notify.failure(value);\n      })\n      .finally(() => {\n        return (promisNumber += 1);\n      });\n\n    timerId = setInterval(() => {\n      createPromise(promisNumber, promisDelay)\n        .then(value => {\n          Notiflix.Notify.success(value);\n        })\n        .catch(value => {\n          Notiflix.Notify.failure(value);\n        });\n      promisNumber += 1;\n      promisDelay += Number(step.value);\n      if (promisNumber > Number(amount.value)) {\n        clearInterval(timerId);\n        promisDelay = 0;\n        promisNumber = 1;\n      }\n    }, step.value);\n  }, delay.value);\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  });\n}\n\nform.addEventListener('submit', onSubmitCreatePromise);\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$timerId","$ce04d3a99e08e73b$var$promisNumber","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","Math","random","concat","addEventListener","event","preventDefault","_elements","currentTarget","elements","step","amount","promisDelay","Number","value","setTimeout","then","$parcel$interopDefault","Notify","success","catch","failure","finally","setInterval","clearInterval"],"version":3,"file":"03-promises.5ecdf9ba.js.map"}